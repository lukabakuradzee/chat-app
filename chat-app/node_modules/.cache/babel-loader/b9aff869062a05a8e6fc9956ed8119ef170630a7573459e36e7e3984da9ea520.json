{"ast":null,"code":"import { updateUserProfile, deleteAccount, resendVerificationEmail } from '../../api/auth';\nimport { passwordRegex } from '../../utils/Regex';\nexport const updateProfile = async (userId, formData, passwordData) => {\n  if (!passwordData.newPassword && !passwordData.confirmPassword) {\n    // Update profile information without password change\n    const updatedData = {\n      ...formData\n    };\n    await updateUserProfile(userId, updatedData);\n    return {\n      message: 'Successfully updated profile information',\n      updatedData\n    };\n  } else {\n    // Perform password validation if newPassword or confirmPassword is not empty\n    if (!passwordRegex.test(passwordData.newPassword)) {\n      throw new Error('Password must contain at least 8 characters, including at least one uppercase letter, one lowercase letter, one number, and one special character');\n    }\n    if (passwordData.newPassword !== passwordData.confirmPassword) {\n      throw new Error(\"Passwords don't match\");\n    }\n\n    // Update profile information with password change\n    const updatedData = {\n      ...formData,\n      password: passwordData.newPassword\n    };\n    await updateUserProfile(userId, updatedData);\n    return {\n      message: 'Password updated successfully',\n      updatedData\n    };\n  }\n};\nexport const uploadAvatar = async avatar => {\n  const formData = new FormData();\n  formData.append('avatar', avatar);\n  const response = await fetch('https://localhost:5500/api/users/uploads', {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem('accessToken')}`\n    },\n    body: formData\n  });\n  const data = await response.json();\n  if (response.ok) {\n    return {\n      message: 'Photo uploaded',\n      data\n    };\n  }\n  throw new Error('Failed to upload avatar');\n};\nexport const deleteAvatar = async userId => {\n  const url = `https://localhost:5500/api/users/delete-avatar/${userId}`;\n  const response = await fetch(url, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem('accessToken')}`\n    }\n  });\n  const data = await response.json();\n  if (response.ok) {\n    return {\n      message: 'Profile photo deleted',\n      data\n    };\n  }\n  throw new Error('Error deleting profile picture');\n};\nexport const deleteAccountService = async userId => {\n  await deleteAccount(userId);\n};\nexport const resendVerification = async token => {\n  await resendVerificationEmail(token);\n};\nexport const resetPasswordRequest = async email => {\n  const url = `https://localhost:5500/api/users/reset-password`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email\n    })\n  });\n  const data = response.json();\n  if (response.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\nexport const sendVerificationSms = async (to, message) => {\n  const url = `https://localhost:5500/api/users/send-verification-sms`;\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      to,\n      message\n    })\n  });\n  const data = response.json();\n  if (response.ok) {\n    return data;\n  }\n  throw new Error('Failed to send verification sms');\n};\nexport const verifySmsCode = async (to, code) => {\n  const url = `https://localhost:5500/api/users/verify-sms`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      to,\n      code\n    })\n  });\n  const data = response.json();\n  if (response.ok) {\n    return data;\n  }\n  throw new Error(\"Error verify sms code\");\n};","map":{"version":3,"names":["updateUserProfile","deleteAccount","resendVerificationEmail","passwordRegex","updateProfile","userId","formData","passwordData","newPassword","confirmPassword","updatedData","message","test","Error","password","uploadAvatar","avatar","FormData","append","response","fetch","method","headers","Authorization","localStorage","getItem","body","data","json","ok","deleteAvatar","url","deleteAccountService","resendVerification","token","resetPasswordRequest","email","JSON","stringify","sendVerificationSms","to","verifySmsCode","code"],"sources":["/Users/macintoshi/Desktop/chat-app/chat-app/src/api/services/userServices.js"],"sourcesContent":["import {\n  updateUserProfile,\n  deleteAccount,\n  resendVerificationEmail,\n} from '../../api/auth';\nimport { passwordRegex } from '../../utils/Regex';\n\nexport const updateProfile = async (userId, formData, passwordData) => {\n  if (!passwordData.newPassword && !passwordData.confirmPassword) {\n    // Update profile information without password change\n    const updatedData = { ...formData };\n    await updateUserProfile(userId, updatedData);\n    return { message: 'Successfully updated profile information', updatedData };\n  } else {\n    // Perform password validation if newPassword or confirmPassword is not empty\n    if (!passwordRegex.test(passwordData.newPassword)) {\n      throw new Error(\n        'Password must contain at least 8 characters, including at least one uppercase letter, one lowercase letter, one number, and one special character',\n      );\n    }\n    if (passwordData.newPassword !== passwordData.confirmPassword) {\n      throw new Error(\"Passwords don't match\");\n    }\n\n    // Update profile information with password change\n    const updatedData = {\n      ...formData,\n      password: passwordData.newPassword,\n    };\n    await updateUserProfile(userId, updatedData);\n    return { message: 'Password updated successfully', updatedData };\n  }\n};\n\nexport const uploadAvatar = async (avatar) => {\n  const formData = new FormData();\n  formData.append('avatar', avatar);\n\n  const response = await fetch('https://localhost:5500/api/users/uploads', {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\n    },\n    body: formData,\n  });\n\n  const data = await response.json();\n  if (response.ok) {\n    return { message: 'Photo uploaded', data };\n  }\n\n  throw new Error('Failed to upload avatar');\n};\n\nexport const deleteAvatar = async (userId) => {\n  const url = `https://localhost:5500/api/users/delete-avatar/${userId}`;\n  const response = await fetch(url, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\n    },\n  });\n  const data = await response.json();\n  if (response.ok) {\n    return { message: 'Profile photo deleted', data };\n  }\n  throw new Error('Error deleting profile picture');\n};\n\nexport const deleteAccountService = async (userId) => {\n  await deleteAccount(userId);\n};\n\nexport const resendVerification = async (token) => {\n  await resendVerificationEmail(token);\n};\n\n\nexport const resetPasswordRequest = async (email) => {\n  const url = `https://localhost:5500/api/users/reset-password`;\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({email}),\n  })\n  const data = response.json()\n  if(response.ok) {\n    return data;\n  }\n  throw new Error(data.message)\n}\n\nexport const sendVerificationSms = async (to, message) => {\n  const url = `https://localhost:5500/api/users/send-verification-sms`\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({to, message})\n  })\n  const data = response.json();\n  if(response.ok) {\n    return data;\n  }\n  throw new Error('Failed to send verification sms')\n}\n\nexport const verifySmsCode = async (to, code) => {\n  const url = `https://localhost:5500/api/users/verify-sms`;\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ to, code })\n    });\n    const data = response.json();\n    if(response.ok) {\n      return data;\n    }\n\n    throw new Error(\"Error verify sms code\")\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}