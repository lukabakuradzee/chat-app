{"ast":null,"code":"import { jwtDecode } from \"jwt-decode\";\nconst signUp = async user => {\n  const url = 'https://localhost:5500/api/users/register';\n  const resp = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(user),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await resp.json();\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\nconst signIn = async user => {\n  const url = 'https://localhost:5500/api/users/login';\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  });\n  const data = await resp.json();\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\nconst updateUserProfile = async (userId, updateData) => {\n  const url = `https://localhost:5500/api/users/update-profile/${userId}`;\n  const resp = await fetch(url, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${localStorage.getItem('accessToken')}`\n    },\n    body: JSON.stringify(updateData)\n  });\n  console.log('Updated Data: ', updateData);\n  const data = await resp.json();\n  console.log(\"USER DATA: \", data);\n  const newToken = data.token;\n  localStorage;\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\nconst verifyEmailStatus = async token => {\n  const url = `https://localhost:5500/api/users/verify-email/${token}`;\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json'\n    }\n  });\n  const data = await resp.json();\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\nconst resendVerificationEmail = async () => {\n  const url = `https://localhost:5500/api/users/resend-verification`;\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${localStorage.getItem('accessToken')}`\n    }\n  });\n  const data = await resp.json();\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\nconst deleteAccount = async userId => {\n  const url = `https://localhost:5500/api/users/delete/${userId}`;\n  const resp = await fetch(url, {\n    method: 'DELETE',\n    headers: {\n      'content-type': 'application/json',\n      Authorization: `Bearer ${localStorage.getItem('accessToken')}`\n    }\n  });\n  const data = await resp.json();\n  console.log('data received delete account: ', data);\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\nconst userProfileAvatar = async () => {\n  const url = 'https://localhost:5500/api/users/uploads';\n  const token = localStorage.getItem('accessToken');\n  const resp = await fetch(url, {\n    headers: {\n      'Content-type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  });\n  const data = await resp.json();\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\nconst authGoogle = async token => {\n  const url = 'https://localhost:5500/api/users/auth/google';\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      token\n    })\n  });\n  const data = await resp.json();\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\nconst resetPassword = async newPassword => {\n  const urlParams = new URLSearchParams(window.location.search);\n  const resetToken = urlParams.get('token');\n  if (!resetToken) {\n    throw new Error('Reset Token is Missing');\n  }\n  const url = `https://localhost:5500/api/users/set-new-password`;\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      newPassword,\n      resetToken\n    })\n  });\n  const data = await resp.json();\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\nexport { signUp, signIn, authGoogle, updateUserProfile, verifyEmailStatus, deleteAccount, resendVerificationEmail, userProfileAvatar, resetPassword };","map":{"version":3,"names":["jwtDecode","signUp","user","url","resp","fetch","method","body","JSON","stringify","headers","data","json","ok","Error","message","signIn","updateUserProfile","userId","updateData","Authorization","localStorage","getItem","console","log","newToken","token","verifyEmailStatus","resendVerificationEmail","deleteAccount","userProfileAvatar","authGoogle","resetPassword","newPassword","urlParams","URLSearchParams","window","location","search","resetToken","get"],"sources":["/Users/macintoshi/Desktop/chat-app/chat-app/src/api/auth.js"],"sourcesContent":["import { jwtDecode } from \"jwt-decode\";\n\nconst signUp = async (user) => {\n  const url = 'https://localhost:5500/api/users/register';\n  const resp = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(user),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await resp.json();\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\n\nconst signIn = async (user) => {\n  const url = 'https://localhost:5500/api/users/login';\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(user),\n  });\n  const data = await resp.json();\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\n\nconst updateUserProfile = async (userId, updateData) => {\n  const url = `https://localhost:5500/api/users/update-profile/${userId}`;\n\n  const resp = await fetch(url, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\n    },\n    body: JSON.stringify(updateData),\n  });\n  console.log('Updated Data: ', updateData);\n\n  const data = await resp.json();\n  console.log(\"USER DATA: \", data)\n  \n  const newToken = data.token;\n  localStorage\n\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\n\nconst verifyEmailStatus = async (token) => {\n  const url = `https://localhost:5500/api/users/verify-email/${token}`;\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n    },\n  });\n\n  const data = await resp.json();\n\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\n\nconst resendVerificationEmail = async () => {\n  const url = `https://localhost:5500/api/users/resend-verification`;\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\n    },\n  });\n  const data = await resp.json();\n\n  if (resp.ok) {\n    return data;\n  }\n\n  throw new Error(data.message);\n};\n\nconst deleteAccount = async (userId) => {\n  const url = `https://localhost:5500/api/users/delete/${userId}`;\n\n  const resp = await fetch(url, {\n    method: 'DELETE',\n    headers: {\n      'content-type': 'application/json',\n      Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\n    },\n  });\n\n  const data = await resp.json();\n  console.log('data received delete account: ', data);\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\n\nconst userProfileAvatar = async () => {\n  const url = 'https://localhost:5500/api/users/uploads';\n  const token = localStorage.getItem('accessToken');\n\n  const resp = await fetch(url, {\n    headers: {\n      'Content-type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  const data = await resp.json();\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\n\nconst authGoogle = async (token) => {\n  const url = 'https://localhost:5500/api/users/auth/google';\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ token }),\n  });\n  const data = await resp.json();\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\n\nconst resetPassword = async (newPassword) => {\n  const urlParams = new URLSearchParams(window.location.search);\n  const resetToken = urlParams.get('token');\n\n  if (!resetToken) {\n    throw new Error('Reset Token is Missing');\n  }\n\n  const url = `https://localhost:5500/api/users/set-new-password`;\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ newPassword, resetToken }),\n  });\n  const data = await resp.json();\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\n\nexport {\n  signUp,\n  signIn,\n  authGoogle,\n  updateUserProfile,\n  verifyEmailStatus,\n  deleteAccount,\n  resendVerificationEmail,\n  userProfileAvatar,\n  resetPassword,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}