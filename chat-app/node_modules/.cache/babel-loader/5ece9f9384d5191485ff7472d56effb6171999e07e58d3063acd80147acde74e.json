{"ast":null,"code":"const signUp = async user => {\n  const url = 'http://localhost:5500/api/users/register';\n  const resp = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(user),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await resp.json();\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\nconst signIn = async user => {\n  const url = 'http://localhost:5500/api/users/login';\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  });\n  const data = await resp.json();\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\nconst updateUserProfile = async (userId, updateData) => {\n  try {\n    const url = `http://localhost:5500/api/users/update-profile/${userId}`;\n    let accessToken = localStorage.getItem('accessToken');\n    const refreshToken = localStorage.getItem('refreshToken');\n    const resp = await fetch(url, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${accessToken}`\n      },\n      body: JSON.stringify(updateData)\n    });\n\n    // Check if response status is 401 (Unauthorized), indicating expired access token\n    if (resp.status === 401) {\n      // Access token expired, try refreshing it using the refresh token\n      const refreshResp = await fetch('http://localhost:5500/api/auth/refresh-token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refreshToken\n        })\n      });\n      if (refreshResp.ok) {\n        // Refresh successful, update access token and retry the user profile update\n        const {\n          newAccessToken\n        } = await refreshResp.json();\n        accessToken = newAccessToken;\n\n        // Retry the user profile update with the new access token\n        const retryResp = await fetch(url, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${accessToken}`\n          },\n          body: JSON.stringify(updateData)\n        });\n        const data = await retryResp.json();\n        if (retryResp.ok) {\n          return data;\n        } else {\n          throw new Error('Error updating user profile');\n        }\n      } else {\n        throw new Error('Failed to refresh access token');\n      }\n    }\n\n    // Regular response handling for successful updates\n    const data = await resp.json();\n    if (resp.ok) {\n      return data;\n    } else {\n      throw new Error('Error updating user profile');\n    }\n  } catch (error) {\n    console.error('Error updating user profile:', error);\n    throw new Error('Error updating user profile');\n  }\n};\nexport { signUp, signIn, updateUserProfile };","map":{"version":3,"names":["signUp","user","url","resp","fetch","method","body","JSON","stringify","headers","data","json","ok","Error","message","signIn","updateUserProfile","userId","updateData","accessToken","localStorage","getItem","refreshToken","Authorization","status","refreshResp","newAccessToken","retryResp","error","console"],"sources":["/Users/macintoshi/Desktop/chat-app/chat-app/src/api/auth.js"],"sourcesContent":["const signUp = async (user) => {\n  const url = 'http://localhost:5500/api/users/register';\n  const resp = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(user),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await resp.json();\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\n\nconst signIn = async (user) => {\n  const url = 'http://localhost:5500/api/users/login';\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(user),\n  });\n  const data = await resp.json();\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\n\nconst updateUserProfile = async (userId, updateData) => {\n  try {\n    const url = `http://localhost:5500/api/users/update-profile/${userId}`;\n    let accessToken = localStorage.getItem('accessToken');\n    const refreshToken = localStorage.getItem('refreshToken');\n\n    const resp = await fetch(url, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${accessToken}`,\n      },\n      body: JSON.stringify(updateData),\n    });\n\n    // Check if response status is 401 (Unauthorized), indicating expired access token\n    if (resp.status === 401) {\n      // Access token expired, try refreshing it using the refresh token\n      const refreshResp = await fetch('http://localhost:5500/api/auth/refresh-token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ refreshToken }),\n      });\n\n      if (refreshResp.ok) {\n        // Refresh successful, update access token and retry the user profile update\n        const { newAccessToken } = await refreshResp.json();\n        accessToken = newAccessToken;\n\n        // Retry the user profile update with the new access token\n        const retryResp = await fetch(url, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${accessToken}`,\n          },\n          body: JSON.stringify(updateData),\n        });\n\n        const data = await retryResp.json();\n\n        if (retryResp.ok) {\n          return data;\n        } else {\n          throw new Error('Error updating user profile');\n        }\n      } else {\n        throw new Error('Failed to refresh access token');\n      }\n    }\n\n    // Regular response handling for successful updates\n    const data = await resp.json();\n    if (resp.ok) {\n      return data;\n    } else {\n      throw new Error('Error updating user profile');\n    }\n  } catch (error) {\n    console.error('Error updating user profile:', error);\n    throw new Error('Error updating user profile');\n  }\n};\n\n\nexport { signUp, signIn, updateUserProfile };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}