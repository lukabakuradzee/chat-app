{"ast":null,"code":"// Extract token from the URL parameter\nconst urlParams = new URLSearchParams(window.location.search);\nconst token = urlParams.get('token');\n\n// Function to verify email with the extracted token\nconst verifyEmail = async token => {\n  try {\n    const url = `http://localhost:5500/api/users/verify-email/${token}`;\n    const resp = await fetch(url, {\n      method: 'POST',\n      // Since you're using POST in your backend route\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await resp.json();\n    if (resp.ok) {\n      return data;\n    } else {\n      throw new Error(data.message);\n    }\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\n// Call verifyEmail function with the extracted token\nverifyEmail(token).then(response => {\n  console.log(response); // Handle response as needed\n}).catch(error => {\n  console.error(error); // Handle error as needed\n});","map":{"version":3,"names":["urlParams","URLSearchParams","window","location","search","token","get","verifyEmail","url","resp","fetch","method","headers","data","json","ok","Error","message","error","then","response","console","log","catch"],"sources":["/Users/macintoshi/Desktop/chat-app/chat-app/src/pages/VerifyEmail/VerifyEmail.jsx"],"sourcesContent":["// Extract token from the URL parameter\nconst urlParams = new URLSearchParams(window.location.search);\nconst token = urlParams.get('token');\n\n// Function to verify email with the extracted token\nconst verifyEmail = async (token) => {\n  try {\n    const url = `http://localhost:5500/api/users/verify-email/${token}`;\n    const resp = await fetch(url, {\n      method: 'POST', // Since you're using POST in your backend route\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    const data = await resp.json();\n    if (resp.ok) {\n      return data;\n    } else {\n      throw new Error(data.message);\n    }\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\n// Call verifyEmail function with the extracted token\nverifyEmail(token)\n  .then(response => {\n    console.log(response); // Handle response as needed\n  })\n  .catch(error => {\n    console.error(error); // Handle error as needed\n  });\n"],"mappings":"AAAA;AACA,MAAMA,SAAS,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC;AAC7D,MAAMC,KAAK,GAAGL,SAAS,CAACM,GAAG,CAAC,OAAO,CAAC;;AAEpC;AACA,MAAMC,WAAW,GAAG,MAAOF,KAAK,IAAK;EACnC,IAAI;IACF,MAAMG,GAAG,GAAI,gDAA+CH,KAAM,EAAC;IACnE,MAAMI,IAAI,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;MAC5BG,MAAM,EAAE,MAAM;MAAE;MAChBC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMJ,IAAI,CAACK,IAAI,CAAC,CAAC;IAC9B,IAAIL,IAAI,CAACM,EAAE,EAAE;MACX,OAAOF,IAAI;IACb,CAAC,MAAM;MACL,MAAM,IAAIG,KAAK,CAACH,IAAI,CAACI,OAAO,CAAC;IAC/B;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIF,KAAK,CAACE,KAAK,CAACD,OAAO,CAAC;EAChC;AACF,CAAC;;AAED;AACAV,WAAW,CAACF,KAAK,CAAC,CACfc,IAAI,CAACC,QAAQ,IAAI;EAChBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CACDG,KAAK,CAACL,KAAK,IAAI;EACdG,OAAO,CAACH,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}