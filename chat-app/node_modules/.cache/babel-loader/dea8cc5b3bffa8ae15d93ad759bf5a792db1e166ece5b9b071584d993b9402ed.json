{"ast":null,"code":"const signUp = async user => {\n  const url = 'http://localhost:5500/api/users/register';\n  const resp = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(user),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await resp.json();\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\nconst signIn = async user => {\n  const url = 'http://localhost:5500/api/users/login';\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  });\n  const data = await resp.json();\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\nconst updateUserProfile = async (userId, updateData) => {\n  const url = `http://localhost:5500/api/users/update-profile/${userId}`;\n  const token = localStorage.getItem('accessToken');\n  const resp = await fetch(url, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify(updateData)\n  });\n  const data = await resp.json();\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error('Failed to fetch data');\n};\nconst verifyEmail = async token => {\n  try {\n    const url = `http://localhost:5500/api/users/verify-email`;\n    const resp = await fetch(url, {\n      method: 'POST',\n      // Change the method to POST\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        token\n      })\n    });\n    console.log(token);\n    const data = await resp.json();\n    if (resp.ok) {\n      return data;\n    } else {\n      throw new Error(data.message);\n    }\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\nexport { signUp, signIn, updateUserProfile, verifyEmail };","map":{"version":3,"names":["signUp","user","url","resp","fetch","method","body","JSON","stringify","headers","data","json","ok","Error","message","signIn","updateUserProfile","userId","updateData","token","localStorage","getItem","Authorization","verifyEmail","console","log","error"],"sources":["/Users/macintoshi/Desktop/chat-app/chat-app/src/api/auth.js"],"sourcesContent":["const signUp = async (user) => {\n  const url = 'http://localhost:5500/api/users/register';\n  const resp = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(user),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await resp.json();\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\n\nconst signIn = async (user) => {\n  const url = 'http://localhost:5500/api/users/login';\n  const resp = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(user),\n  });\n  const data = await resp.json();\n  if (resp.ok) {\n    return data;\n  }\n  throw new Error(data.message);\n};\n\nconst updateUserProfile = async (userId, updateData) => {\n  const url = `http://localhost:5500/api/users/update-profile/${userId}`;\n  const token = localStorage.getItem('accessToken');\n\n  const resp = await fetch(url, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(updateData),\n  });\n\n  const data = await resp.json();\n\n  if (resp.ok) {\n    return data;\n  }\n\n  throw new Error('Failed to fetch data');\n};\n\nconst verifyEmail = async (token) => {\n  try {\n    const url = `http://localhost:5500/api/users/verify-email`;\n    const resp = await fetch(url, {\n      method: 'POST', // Change the method to POST\n      headers: {\n        'Content-Type': 'application/json', \n        \n      },\n      body: JSON.stringify({ token }),\n    });\n    console.log(token)\n    const data = await resp.json();\n    if (resp.ok) {\n      return data;\n    } else {\n      throw new Error(data.message)\n    }\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\n\nexport { signUp, signIn, updateUserProfile, verifyEmail };\n"],"mappings":"AAAA,MAAMA,MAAM,GAAG,MAAOC,IAAI,IAAK;EAC7B,MAAMC,GAAG,GAAG,0CAA0C;EACtD,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;IAC5BG,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI,CAAC;IAC1BQ,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,MAAMC,IAAI,GAAG,MAAMP,IAAI,CAACQ,IAAI,CAAC,CAAC;EAC9B,IAAIR,IAAI,CAACS,EAAE,EAAE;IACX,OAAOF,IAAI;EACb;EACA,MAAM,IAAIG,KAAK,CAACH,IAAI,CAACI,OAAO,CAAC;AAC/B,CAAC;AAED,MAAMC,MAAM,GAAG,MAAOd,IAAI,IAAK;EAC7B,MAAMC,GAAG,GAAG,uCAAuC;EACnD,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;IAC5BG,MAAM,EAAE,MAAM;IACdI,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDH,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;EAC3B,CAAC,CAAC;EACF,MAAMS,IAAI,GAAG,MAAMP,IAAI,CAACQ,IAAI,CAAC,CAAC;EAC9B,IAAIR,IAAI,CAACS,EAAE,EAAE;IACX,OAAOF,IAAI;EACb;EACA,MAAM,IAAIG,KAAK,CAACH,IAAI,CAACI,OAAO,CAAC;AAC/B,CAAC;AAED,MAAME,iBAAiB,GAAG,MAAAA,CAAOC,MAAM,EAAEC,UAAU,KAAK;EACtD,MAAMhB,GAAG,GAAI,kDAAiDe,MAAO,EAAC;EACtE,MAAME,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EAEjD,MAAMlB,IAAI,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;IAC5BG,MAAM,EAAE,KAAK;IACbI,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCa,aAAa,EAAG,UAASH,KAAM;IACjC,CAAC;IACDb,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACU,UAAU;EACjC,CAAC,CAAC;EAEF,MAAMR,IAAI,GAAG,MAAMP,IAAI,CAACQ,IAAI,CAAC,CAAC;EAE9B,IAAIR,IAAI,CAACS,EAAE,EAAE;IACX,OAAOF,IAAI;EACb;EAEA,MAAM,IAAIG,KAAK,CAAC,sBAAsB,CAAC;AACzC,CAAC;AAED,MAAMU,WAAW,GAAG,MAAOJ,KAAK,IAAK;EACnC,IAAI;IACF,MAAMjB,GAAG,GAAI,8CAA6C;IAC1D,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;MAC5BG,MAAM,EAAE,MAAM;MAAE;MAChBI,OAAO,EAAE;QACP,cAAc,EAAE;MAElB,CAAC;MACDH,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEW;MAAM,CAAC;IAChC,CAAC,CAAC;IACFK,OAAO,CAACC,GAAG,CAACN,KAAK,CAAC;IAClB,MAAMT,IAAI,GAAG,MAAMP,IAAI,CAACQ,IAAI,CAAC,CAAC;IAC9B,IAAIR,IAAI,CAACS,EAAE,EAAE;MACX,OAAOF,IAAI;IACb,CAAC,MAAM;MACL,MAAM,IAAIG,KAAK,CAACH,IAAI,CAACI,OAAO,CAAC;IAC/B;EACF,CAAC,CAAC,OAAOY,KAAK,EAAE;IACd,MAAM,IAAIb,KAAK,CAACa,KAAK,CAACZ,OAAO,CAAC;EAChC;AACF,CAAC;AAGD,SAASd,MAAM,EAAEe,MAAM,EAAEC,iBAAiB,EAAEO,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}