{"ast":null,"code":"var _jsxFileName = \"/Users/macintoshi/Desktop/chat-app/chat-app/src/pages/UserInfo/UserInfo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useAuthContext } from '../../context/auth/AuthContextProvider';\nimport { resendVerificationEmail, updateUserProfile } from '../../api/auth';\nimport { logOutAction, updateUserDataAction } from '../../context/auth/actions';\nimport { passwordRegex } from '../../utils/Regex';\nimport { deleteAccount } from '../../api/auth';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserInfo = () => {\n  _s();\n  const {\n    state,\n    dispatch\n  } = useAuthContext();\n  const {\n    user\n  } = state;\n  const [message, setMessage] = useState('');\n  const [formData, setFormData] = useState({\n    username: user.username || '',\n    name: user.name || '',\n    lastName: user.lastName || '',\n    age: user.age || '',\n    email: user.email || ''\n  });\n  const [passwordData, setPasswordData] = useState({\n    newPassword: '',\n    confirmPassword: ''\n  });\n  const [avatar, setAvatar] = useState(null);\n  const navigate = useNavigate();\n  const handleChange = useCallback(e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevFormData => ({\n      ...prevFormData,\n      [name]: value\n    }));\n  }, []);\n  const handlePasswordChange = useCallback(e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setPasswordData(prevPasswordData => ({\n      ...prevPasswordData,\n      [name]: value\n    }));\n  }, []);\n  const handleAvatarChange = e => {\n    setAvatar(e.target.files[0]); // Set the selected avatar file\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // Check if newPassword and confirmPassword are both empty\n      if (!passwordData.newPassword && !passwordData.confirmPassword) {\n        // Update profile information without password change\n        const updatedData = {\n          ...formData\n        };\n        await updateUserProfile(user.userId, updatedData);\n        dispatch(updateUserDataAction(updatedData));\n        setMessage('Successfully updated profile information');\n      } else {\n        // Perform password validation if newPassword or confirmPassword is not empty\n        if (!passwordRegex.test(passwordData.newPassword)) {\n          throw new Error('Password must contain at least 8 characters, including at least one uppercase letter, one lowercase letter, one number, and one special character');\n        }\n        if (passwordData.newPassword !== passwordData.confirmPassword) {\n          throw new Error(\"Passwords don't match\");\n        }\n\n        // Update profile information with password change\n        const updatedData = {\n          ...formData,\n          password: passwordData.newPassword\n        };\n        await updateUserProfile(user.userId, updatedData);\n        dispatch(updateUserDataAction(updatedData));\n        setMessage('Password updated successfully');\n        setPasswordData({\n          newPassword: '',\n          confirmPassword: ''\n        });\n      }\n    } catch (error) {\n      console.error('Failed to update user profile:', error);\n      setMessage(error.message);\n      return;\n    }\n  };\n  useEffect(() => {\n    const userFromStorage = JSON.parse(localStorage.getItem('user'));\n    if (userFromStorage) {\n      setFormData({\n        username: userFromStorage.username || '',\n        name: userFromStorage.name || '',\n        lastName: userFromStorage.lastName || '',\n        age: userFromStorage.age || '',\n        email: userFromStorage.email || ''\n      });\n    }\n  }, [user]);\n  const handleDeleteAccount = async () => {\n    const confirmed = window.confirm('Are you sure you want to delete this account?');\n    if (!confirmed) return;\n    try {\n      await deleteAccount(user.userId);\n      setTimeout(() => {\n        dispatch(logOutAction());\n        navigate('/');\n      }, 2000);\n      setMessage('Account deleted successfully');\n    } catch (error) {\n      console.error('Failed to delete account', error);\n      setMessage(error.message);\n    }\n  };\n  const handleResendVerification = async token => {\n    try {\n      await resendVerificationEmail(token);\n      setMessage('Email verification sent');\n    } catch (error) {\n      console.error('Failed to send verification email', error);\n      setMessage(error.message);\n    }\n  };\n  const handleUploadAvatar = async () => {\n    try {\n      const formData = new FormData();\n      formData.append('avatar', avatar);\n      const response = await fetch('http://localhost:5500/api/users/uploads', {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('accessToken')}`\n        },\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error('Failed to upload avatar');\n      }\n\n      // Avatar uploaded successfully\n      console.log('Avatar uploaded successfully');\n    } catch (error) {\n      console.error('Error uploading avatar:', error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-info-modal-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [Object.entries(formData).map(([key, value]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-inputs-update-profile\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: key,\n          children: [key.charAt(0).toUpperCase() + key.slice(1), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: key.includes('Password') ? 'password' : 'text',\n          id: key,\n          name: key,\n          value: value,\n          onChange: handleChange,\n          disabled: key === 'username',\n          autoComplete: key === 'password' ? 'on' : 'off'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this), key === 'email' && !user.emailVerified && /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fa-solid fa-circle-xmark\",\n          onClick: handleResendVerification\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 15\n        }, this), key === 'email' && user.emailVerified && /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fa-solid fa-circle-check\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 15\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"password-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-inputs-update-profile\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"newPassword\",\n            children: \"New Password:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"newPassword\",\n            name: \"newPassword\",\n            value: passwordData.newPassword,\n            onChange: handlePasswordChange,\n            autoComplete: \"true\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-inputs-update-profile\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"confirmPassword\",\n            children: \"Confirm Password:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"confirmPassword\",\n            name: \"confirmPassword\",\n            value: passwordData.confirmPassword,\n            onChange: handlePasswordChange,\n            autoComplete: \"true\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Save Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"delete-account-button\",\n      onClick: handleDeleteAccount,\n      children: \"Delete Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-avatar-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"avatar\",\n        children: \"Upload Photo:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"avatar\",\n        name: \"avatar\",\n        accept: \"image/*\",\n        onChange: handleAvatarChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUploadAvatar,\n      children: \"Upload Avatar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(UserInfo, \"XbCqW2te1PkKTJFQh0Xm1HS9t7U=\", false, function () {\n  return [useAuthContext, useNavigate];\n});\n_c = UserInfo;\nexport default UserInfo;\nvar _c;\n$RefreshReg$(_c, \"UserInfo\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useAuthContext","resendVerificationEmail","updateUserProfile","logOutAction","updateUserDataAction","passwordRegex","deleteAccount","useNavigate","jsxDEV","_jsxDEV","UserInfo","_s","state","dispatch","user","message","setMessage","formData","setFormData","username","name","lastName","age","email","passwordData","setPasswordData","newPassword","confirmPassword","avatar","setAvatar","navigate","handleChange","e","value","target","prevFormData","handlePasswordChange","prevPasswordData","handleAvatarChange","files","handleSubmit","preventDefault","updatedData","userId","test","Error","password","error","console","userFromStorage","JSON","parse","localStorage","getItem","handleDeleteAccount","confirmed","window","confirm","setTimeout","handleResendVerification","token","handleUploadAvatar","FormData","append","response","fetch","method","headers","Authorization","body","ok","log","className","children","onSubmit","Object","entries","map","key","htmlFor","charAt","toUpperCase","slice","fileName","_jsxFileName","lineNumber","columnNumber","type","includes","id","onChange","disabled","autoComplete","emailVerified","onClick","accept","_c","$RefreshReg$"],"sources":["/Users/macintoshi/Desktop/chat-app/chat-app/src/pages/UserInfo/UserInfo.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useAuthContext } from '../../context/auth/AuthContextProvider';\nimport { resendVerificationEmail, updateUserProfile } from '../../api/auth';\nimport { logOutAction, updateUserDataAction } from '../../context/auth/actions';\nimport { passwordRegex } from '../../utils/Regex';\nimport { deleteAccount } from '../../api/auth';\nimport { useNavigate } from 'react-router-dom';\n\nconst UserInfo = () => {\n  const { state, dispatch } = useAuthContext();\n  const { user } = state;\n  const [message, setMessage] = useState('');\n  const [formData, setFormData] = useState({\n    username: user.username || '',\n    name: user.name || '',\n    lastName: user.lastName || '',\n    age: user.age || '',\n    email: user.email || '',\n  });\n  const [passwordData, setPasswordData] = useState({\n    newPassword: '',\n    confirmPassword: '',\n  });\n  const [avatar, setAvatar] = useState(null);\n  const navigate = useNavigate();\n\n  const handleChange = useCallback((e) => {\n    const { name, value } = e.target;\n    setFormData((prevFormData) => ({\n      ...prevFormData,\n      [name]: value,\n    }));\n  }, []);\n\n  const handlePasswordChange = useCallback((e) => {\n    const { name, value } = e.target;\n    setPasswordData((prevPasswordData) => ({\n      ...prevPasswordData,\n      [name]: value,\n    }));\n  }, []);\n\n  const handleAvatarChange = (e) => {\n    setAvatar(e.target.files[0]); // Set the selected avatar file\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      // Check if newPassword and confirmPassword are both empty\n      if (!passwordData.newPassword && !passwordData.confirmPassword) {\n        // Update profile information without password change\n        const updatedData = { ...formData };\n        await updateUserProfile(user.userId, updatedData);\n        dispatch(updateUserDataAction(updatedData));\n        setMessage('Successfully updated profile information');\n      } else {\n        // Perform password validation if newPassword or confirmPassword is not empty\n        if (!passwordRegex.test(passwordData.newPassword)) {\n          throw new Error(\n            'Password must contain at least 8 characters, including at least one uppercase letter, one lowercase letter, one number, and one special character',\n          );\n        }\n        if (passwordData.newPassword !== passwordData.confirmPassword) {\n          throw new Error(\"Passwords don't match\");\n        }\n\n        // Update profile information with password change\n        const updatedData = {\n          ...formData,\n          password: passwordData.newPassword,\n        };\n        await updateUserProfile(user.userId, updatedData);\n        dispatch(updateUserDataAction(updatedData));\n        setMessage('Password updated successfully');\n        setPasswordData({ newPassword: '', confirmPassword: '' });\n      }\n    } catch (error) {\n      console.error('Failed to update user profile:', error);\n      setMessage(error.message);\n      return;\n    }\n  };\n\n  useEffect(() => {\n    const userFromStorage = JSON.parse(localStorage.getItem('user'));\n    if (userFromStorage) {\n      setFormData({\n        username: userFromStorage.username || '',\n        name: userFromStorage.name || '',\n        lastName: userFromStorage.lastName || '',\n        age: userFromStorage.age || '',\n        email: userFromStorage.email || '',\n      });\n    }\n  }, [user]);\n\n  const handleDeleteAccount = async () => {\n    const confirmed = window.confirm(\n      'Are you sure you want to delete this account?',\n    );\n    if (!confirmed) return;\n\n    try {\n      await deleteAccount(user.userId);\n      setTimeout(() => {\n        dispatch(logOutAction());\n        navigate('/');\n      }, 2000);\n      setMessage('Account deleted successfully');\n    } catch (error) {\n      console.error('Failed to delete account', error);\n      setMessage(error.message);\n    }\n  };\n\n  const handleResendVerification = async (token) => {\n    try {\n      await resendVerificationEmail(token);\n      setMessage('Email verification sent');\n    } catch (error) {\n      console.error('Failed to send verification email', error);\n      setMessage(error.message);\n    }\n  };\n\n  const handleUploadAvatar = async () => {\n    try {\n      const formData = new FormData();\n      formData.append('avatar', avatar);\n\n      const response = await fetch('http://localhost:5500/api/users/uploads', {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('accessToken')}`,\n        },\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to upload avatar');\n      }\n\n      // Avatar uploaded successfully\n      console.log('Avatar uploaded successfully');\n    } catch (error) {\n      console.error('Error uploading avatar:', error.message);\n    }\n  };\n\n  return (\n    <div className=\"user-info-modal-wrapper\">\n      <form onSubmit={handleSubmit}>\n        \n        {Object.entries(formData).map(([key, value]) => (\n          <div className=\"form-inputs-update-profile\" key={key}>\n            <label htmlFor={key}>\n              {key.charAt(0).toUpperCase() + key.slice(1)}:\n            </label>\n            <input\n              type={key.includes('Password') ? 'password' : 'text'}\n              id={key}\n              name={key}\n              value={value}\n              onChange={handleChange}\n              disabled={key === 'username'}\n              autoComplete={key === 'password' ? 'on' : 'off'}\n            />\n            {key === 'email' && !user.emailVerified && (\n              <i\n                className=\"fa-solid fa-circle-xmark\"\n                onClick={handleResendVerification}\n              ></i>\n            )}\n            {key === 'email' && user.emailVerified && (\n              <i className=\"fa-solid fa-circle-check\"></i>\n            )}\n          </div>\n        ))}\n        <div className=\"password-section\">\n          <div className=\"form-inputs-update-profile\">\n            <label htmlFor=\"newPassword\">New Password:</label>\n            <input\n              type=\"password\"\n              id=\"newPassword\"\n              name=\"newPassword\"\n              value={passwordData.newPassword}\n              onChange={handlePasswordChange}\n              autoComplete=\"true\"\n            />\n          </div>\n          <div className=\"form-inputs-update-profile\">\n            <label htmlFor=\"confirmPassword\">Confirm Password:</label>\n            <input\n              type=\"password\"\n              id=\"confirmPassword\"\n              name=\"confirmPassword\"\n              value={passwordData.confirmPassword}\n              onChange={handlePasswordChange}\n              autoComplete=\"true\"\n            />\n          </div>\n        </div>\n        <button type=\"submit\">Save Changes</button>\n      </form>\n      <button className=\"delete-account-button\" onClick={handleDeleteAccount}>\n        Delete Account\n      </button>\n      <div className='user-avatar-box'>\n          <label htmlFor=\"avatar\">Upload Photo:</label>\n          <input\n            type=\"file\"\n            id=\"avatar\"\n            name=\"avatar\"\n            accept=\"image/*\"\n            onChange={handleAvatarChange}\n          />\n        </div>\n      <button onClick={handleUploadAvatar}\n      >Upload Avatar</button>\n      {message && <p>{message}</p>}\n    </div>\n  );\n};\n\nexport default UserInfo;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}