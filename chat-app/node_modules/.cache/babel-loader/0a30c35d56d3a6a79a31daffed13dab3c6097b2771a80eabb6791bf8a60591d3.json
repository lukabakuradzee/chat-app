{"ast":null,"code":"var _jsxFileName = \"/Users/macintoshi/Desktop/chat-app/chat-app/src/components/ResetPasswordForm/ResetPassword.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ForgetPasswordModal = ({\n  onClose\n}) => {\n  _s();\n  const [resetPassword, setResetPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      const response = await fetch('http://localhost:5500/api/users/reset-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: resetPassword\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setMessage(data.message);\n        onClose(); // Close the modal after submitting\n        console.log(data);\n      } else {\n        setMessage(\"Failed to send password reset instructions\");\n      }\n    } catch (error) {\n      setMessage(\"Failed to send password reset instructions\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"password-reset-modal\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"close\",\n      onClick: onClose,\n      children: \"\\xD7\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Recovery Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        value: email,\n        onChange: e => setResetPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Sending password reset instructions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 23\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(ForgetPasswordModal, \"wfcpISEMSey2EXVAzyTdBprzaHA=\");\n_c = ForgetPasswordModal;\nexport default ForgetPasswordModal;\nvar _c;\n$RefreshReg$(_c, \"ForgetPasswordModal\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ForgetPasswordModal","onClose","_s","resetPassword","setResetPassword","message","setMessage","loading","setLoading","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","email","data","json","ok","console","log","error","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","value","onChange","target","required","disabled","_c","$RefreshReg$"],"sources":["/Users/macintoshi/Desktop/chat-app/chat-app/src/components/ResetPasswordForm/ResetPassword.jsx"],"sourcesContent":["import React, { useState } from 'react';\n\nconst ForgetPasswordModal = ({ onClose }) => {\n  const [resetPassword, setResetPassword] = useState('');\n  const [message, setMessage] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n        const response = await fetch('http://localhost:5500/api/users/reset-password', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({email: resetPassword}),\n        })\n\n     const data = await response.json();\n      if(response.ok) {\n        setMessage(data.message)\n        onClose(); // Close the modal after submitting\n        console.log(data)\n      }  else {\n        setMessage(\"Failed to send password reset instructions\")\n      } \n    } catch (error) {\n        setMessage(\"Failed to send password reset instructions\")\n      } finally {\n        setLoading(false)\n      }\n    \n};\n  \n\n  return (\n    \n    <div className=\"password-reset-modal\">\n      <span className=\"close\" onClick={onClose}>&times;</span>\n        <form onSubmit={handleSubmit}>\n          <label htmlFor=\"email\">Recovery Email</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={email}\n            onChange={(e) => setResetPassword(e.target.value)}\n            required\n          />\n          <button type=\"submit\" disabled={loading}>Submit</button>\n          {loading && <p>Sending password reset instructions...</p>}\n          {message && <p>{message}</p>}\n\n        </form>\n      </div>\n  );\n};\n\nexport default ForgetPasswordModal;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}